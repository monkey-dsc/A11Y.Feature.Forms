@using A11Y.Feature.Forms.Dtos
@using A11Y.Feature.Forms.Extensions
@using A11Y.Feature.Forms.Helpers
@using A11Y.Feature.Forms.Shared.Constants
@model A11Y.Feature.Forms.Models.A11YCheckBoxViewModel

@{
    var requiredMarker = Model.Required ? "*" : string.Empty;
    var attributesToReplace = new Dictionary<string, bool> { { "data-val-ischecked", !string.IsNullOrWhiteSpace(Model.RequiredFieldMessage) } };
}

<div class="form-group"
     aria-live="polite"
     aria-relevant="additions text"
     role="alertdialog">
    <div class="form-control @Model.CssClass">

        <label class="@Model.LabelCssClass"
               for="@Html.IdFor(m => Model.Value)">
            <input aria-describedby="@Html.IdFor(m => Model.Value)"
                   type="checkbox"
                   id="@Html.IdFor(m => Model.Value)"
                   name="@Html.NameFor(m => Model.Value)"
                   class="checkbox"
                   @if (Model.Value) { <text> checked="checked" </text> }
                   value="true"
                   @if (Model.HasAutocomplete) { <text> autocomplete="@Model.AutocompleteValue" </text> }
                   @if (Model.Required) { if (!string.IsNullOrEmpty(Model.RequiredFieldMessage)) { <text> data-val-ischecked="@Model.RequiredFieldMessage" aria-required="true" </text> } }
                   data-sc-tracking="@Model.IsTrackingEnabled"
                   data-sc-field-name="@Model.Name"
                   data-sc-field-key="@Model.ConditionSettings.FieldKey" @Html.GenerateUnobtrusiveValidationAttributes(m => Model.Value, attributesToReplace) />
            @* ToDo: Review this if necessary, DisplayTextFor should fit for both, the other was SXA solution *@
            @*@if (Html.Sitecore().IsExperienceFormsEditMode())
                {*@
            @Html.DisplayTextFor(t => Model.Title)
            @requiredMarker
            @*}
                else
                {
                    @Html.Sitecore().Field(Templates.LabelSettings.Fields.Title, Sitecore.Context.Database.Items.GetItem(Model.ItemId), new A11YRenderingParameterDto { ShowTextAsRaw = true })
                    @requiredMarker
                }*@
            <input type="hidden"
                   name="@Html.NameFor(m => Model.Value)"
                   value="false" />
        </label>
    </div>
    @Html.ValidationMessageFor(m => Model.Value)
</div>
